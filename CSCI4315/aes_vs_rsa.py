# -*- coding: utf-8 -*-
"""AES vs RSA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mYBYHY-9CLm8TeNV4YG-osubbYMJlhup
"""


from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.PublicKey import RSA
import os
import bitstring
import random
import string
import time

def keygen1():
  AES_128 = AES.new(os.urandom(16), AES.MODE_EAX)
  AES_192 = AES.new(os.urandom(24), AES.MODE_EAX)
  AES_256 = AES.new(os.urandom(32), AES.MODE_EAX)
  RSA_1024 = RSA.generate(1024)
  RSA_2048 = RSA.generate(2048)
  RSA_4096 = RSA.generate(4096)
  return [AES_128, AES_192, AES_256], [RSA_1024, RSA_2048, RSA_4096]

def keygen2():
  AES_128_E = AES.new(os.urandom(16), AES.MODE_EAX)
  AES_192_E = AES.new(os.urandom(24), AES.MODE_EAX)
  AES_256_E = AES.new(os.urandom(32), AES.MODE_EAX)
  AES_128_D = AES.new(os.urandom(16), AES.MODE_EAX, AES_128_E.nonce)
  AES_192_D = AES.new(os.urandom(24), AES.MODE_EAX, AES_192_E.nonce)
  AES_256_D = AES.new(os.urandom(32), AES.MODE_EAX, AES_256_E.nonce)
  RSA_1024 = RSA.generate(1024)
  RSA_2048 = RSA.generate(2048)
  RSA_4096 = RSA.generate(4096)
  return [AES_128_E, AES_128_D, AES_192_E, AES_192_D, AES_256_E, AES_256_D], [RSA_1024, RSA_2048, RSA_4096]

def pairgen(length, pairs):
  pairlist = []
  for i in range(pairs):
    local = []
    first = bitstring.BitStream(int=random.getrandbits(length-1), length=length)
    second = first + bitstring.BitStream(bin='0')
    first += bitstring.BitStream(bin='1')
    local = [first, second]
    pairlist.append(local)
  return pairlist

def Q1(length, pairs):
  print("\nSTARTING Q1\n")
  keys = keygen1()
  pairs = pairgen(length, pairs)

  AES_128 = 0
  AES_192 = 0
  AES_256 = 0
  RSA_1024 = 0
  RSA_2048 = 0
  RSA_4096 = 0

  for index, pair in enumerate(pairs):
    enc1 = keys[0][0].encrypt((pair[0]).tobytes())
    enc2 = keys[0][0].encrypt((pair[1]).tobytes())
    AES_128 += ((bitstring.BitStream(enc1) ^ bitstring.BitStream(enc2)).bin).count('1')
    enc1 = keys[0][1].encrypt((pair[0]).tobytes())
    enc2 = keys[0][1].encrypt((pair[1]).tobytes())
    AES_192 += ((bitstring.BitStream(enc1) ^ bitstring.BitStream(enc2)).bin).count('1')
    enc1 = keys[0][2].encrypt((pair[0]).tobytes())
    enc2 = keys[0][2].encrypt((pair[1]).tobytes())
    AES_256 += ((bitstring.BitStream(enc1) ^ bitstring.BitStream(enc2)).bin).count('1')
    realkey = PKCS1_OAEP.new(keys[1][0])
    enc1 = realkey.encrypt((pair[0]).tobytes())
    enc2 = realkey.encrypt((pair[1]).tobytes())
    RSA_1024 += ((bitstring.BitStream(enc1) ^ bitstring.BitStream(enc2)).bin).count('1')
    realkey = PKCS1_OAEP.new(keys[1][1])
    enc1 = realkey.encrypt((pair[0]).tobytes())
    enc2 = realkey.encrypt((pair[1]).tobytes())
    RSA_2048 += ((bitstring.BitStream(enc1) ^ bitstring.BitStream(enc2)).bin).count('1')
    realkey = PKCS1_OAEP.new(keys[1][2])
    enc1 = realkey.encrypt((pair[0]).tobytes())
    enc2 = realkey.encrypt((pair[1]).tobytes())
    RSA_4096 += ((bitstring.BitStream(enc1) ^ bitstring.BitStream(enc2)).bin).count('1')
    
  print(AES_128 / len(pairs), "average bit difference(s) over",len(pairs),"runs in encrypted string with source string of length",length,"with 128 bit AES")
  print(AES_192 / len(pairs), "average bit difference(s) over",len(pairs),"runs in encrypted string with source string of length",length,"with 192 bit AES")
  print(AES_256 / len(pairs), "average bit difference(s) over",len(pairs),"runs in encrypted string with source string of length",length,"with 256 bit AES")
  print(RSA_1024 / len(pairs), "average bit difference(s) over",len(pairs),"runs in encrypted string with source string of length",length,"with 1024 bit RSA")
  print(RSA_2048 / len(pairs), "average bit difference(s) over",len(pairs),"runs in encrypted string with source string of length",length,"with 2048 bit RSA")
  print(RSA_4096 / len(pairs), "average bit difference(s) over",len(pairs),"runs in encrypted string with source string of length",length,"with 4096 bit RSA")

  print("\nSTOPPING Q1\n")

def genrandomtext(length):
  return ''.join(random.SystemRandom().choice(string.digits + string.ascii_letters) for _ in range(length))

def Q2(length, runs):
  print("\nSTARTING Q2\n")
  AES_128_T_E = 0
  AES_128_T_D = 0
  AES_192_T_E = 0
  AES_192_T_D = 0
  AES_256_T_E = 0
  AES_256_T_D = 0
  RSA_1024_T_E = 0
  RSA_1024_T_D = 0
  RSA_2048_T_E = 0
  RSA_2048_T_D = 0
  RSA_4096_T_E = 0
  RSA_4096_T_D = 0

  plaintext = genrandomtext(length)
  for i in range(runs):
    keys = keygen2()

    t0 = time.perf_counter()
    enc = keys[0][0].encrypt(bytes(plaintext, 'utf-8'))
    t1 = time.perf_counter()
    AES_128_T_E += t1 - t0
    t0 = time.perf_counter()
    dec = keys[0][1].decrypt(enc)
    t1 = time.perf_counter()
    AES_128_T_D += t1 - t0

    t0 = time.perf_counter()
    enc = keys[0][2].encrypt(bytes(plaintext, 'utf-8'))
    t1 = time.perf_counter()
    AES_192_T_E += t1 - t0
    t0 = time.perf_counter()
    dec = keys[0][3].decrypt(enc)
    t1 = time.perf_counter()
    AES_192_T_D += t1 - t0

    t0 = time.perf_counter()
    enc = keys[0][4].encrypt(bytes(plaintext, 'utf-8'))
    t1 = time.perf_counter()
    AES_256_T_E += t1 - t0
    t0 = time.perf_counter()
    dec = keys[0][5].decrypt(enc)
    t1 = time.perf_counter()
    AES_256_T_D += t1 - t0

    t0 = time.perf_counter()
    realkey = PKCS1_OAEP.new(keys[1][0])
    enc = realkey.encrypt(bytes(plaintext, 'utf-8'))
    t1 = time.perf_counter()
    RSA_1024_T_E += t1 - t0
    t0 = time.perf_counter()
    dec = realkey.decrypt(enc)
    t1 = time.perf_counter()
    RSA_1024_T_D += t1 - t0

    t0 = time.perf_counter()
    realkey = PKCS1_OAEP.new(keys[1][1])
    enc = realkey.encrypt(bytes(plaintext, 'utf-8'))
    t1 = time.perf_counter()
    RSA_2048_T_E += t1 - t0
    t0 = time.perf_counter()
    dec = realkey.decrypt(enc)
    t1 = time.perf_counter()
    RSA_2048_T_D += t1 - t0

    t0 = time.perf_counter()
    realkey = PKCS1_OAEP.new(keys[1][2])
    enc = realkey.encrypt(bytes(plaintext, 'utf-8'))
    t1 = time.perf_counter()
    RSA_4096_T_E += t1 - t0
    t0 = time.perf_counter()
    dec = realkey.decrypt(enc)
    t1 = time.perf_counter()
    RSA_4096_T_D += t1 - t0
    
  print((AES_128_T_E / runs) * 1000000, "nanoseconds (",runs,"run average) for 128 bit AES encryption on bit string of length",length)
  print((AES_128_T_D / runs) * 1000000, "nanoseconds (",runs,"run average) for 128 bit AES decryption on bit string of length",length)
  print((AES_192_T_E / runs) * 1000000, "nanoseconds (",runs,"run average) for 192 bit AES encryption on bit string of length",length)
  print((AES_192_T_D / runs) * 1000000, "nanoseconds (",runs,"run average) for 192 bit AES decryption on bit string of length",length)
  print((AES_256_T_E / runs) * 1000000, "nanoseconds (",runs,"run average) for 256 bit AES encryption on bit string of length",length)
  print((AES_256_T_D / runs) * 1000000, "nanoseconds (",runs,"run average) for 256 bit AES decryption on bit string of length",length)
  print((RSA_1024_T_E / runs) * 1000000, "nanoseconds (",runs,"run average) for 1024 bit RSA encryption on bit string of length",length)
  print((RSA_1024_T_D / runs) * 1000000, "nanoseconds (",runs,"run average) for 1024 bit RSA decryption on bit string of length",length)
  print((RSA_2048_T_E / runs) * 1000000, "nanoseconds (",runs,"run average) for 2048 bit RSA encryption on bit string of length",length)
  print((RSA_2048_T_D / runs) * 1000000, "nanoseconds (",runs,"run average) for 2048 bit RSA decryption on bit string of length",length)
  print((RSA_4096_T_E / runs) * 1000000, "nanoseconds (",runs,"run average) for 4096 bit RSA encryption on bit string of length",length)
  print((RSA_4096_T_D / runs) * 1000000, "nanoseconds (",runs,"run average) for 4096 bit RSA decryption on bit string of length",length)
  print("\nSTOPPING Q2\n")

print("START")

Q1(50, 100)
Q2(50, 100)

print("STOP")